[build-system]
requires = ["setuptools>=69.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lhatolcsc"
version = "0.2.15"
description = "BOM to LCSC Part Matcher - Fuzzy search tool for electronic components"
readme = "README.md"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Manufacturing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dependencies = [
    "python-dotenv>=1.0.0",
    "requests>=2.32.4",
    "xlwings>=0.30.0",
    "pandas>=2.1.0",
    "rapidfuzz>=3.5.0",
    "pillow>=10.3.0",
    "pyyaml>=6.0.1",
    "python-dateutil>=2.8.2",
    "tqdm>=4.66.0",
    "pydantic>=2.5.0",
    "diskcache>=5.6.3",
    "flask>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "isort>=5.13.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/LHAtoLCSC"
Documentation = "https://github.com/yourusername/LHAtoLCSC/docs"
Repository = "https://github.com/yourusername/LHAtoLCSC"
"Bug Tracker" = "https://github.com/yourusername/LHAtoLCSC/issues"

[project.scripts]
lhatolcsc = "lhatolcsc.__main__:main"

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "0.2.15"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "0.2.15"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/lhatolcsc",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-branch",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.pylint.main]
py-version = "0.2.15"
ignore = ["tests", "docs", "build", "dist"]
max-line-length = 100

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
]

[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "W503",  # line break before binary operator (conflicts with black)
]
